/*
	Extension Function and Infix keyword
	a.add(b) after using infix in front of function -> a add b
	a and b must object
	
	
	to convert code redable format  like 
	traditional method :  "Alex".from("NY")
	standard Method :  "Alex" from "NY"
	'from' is fun name
	
	
	
*/


class Main
{
    var fname : String ? = null
    fun show()
    {
        println("$fname")
    }
}
infix fun Main.add(m3 : Main) : String = "Hi We are "+this.fname+" and " +m3.fname

fun main(args: Array<String>)
{
    val m1 = Main()
    m1.fname = "Akshay"
    m1.show()
    val m2 = Main()
    m2.fname = "Pallavi"
    m2.show()
    println(m1 add m2)

}

__________________________________________________________________________________________________________________________

class Main(var name : String)

fun main() {

    val name = Main("Alex")
    val dest = Main("New York")

    println(name from  dest)

}

infix fun Main.from(main: Main) : String = "${this.name} from ${main.name}"

------------------------------------------------------------------------
output > 
Alex from New York

________________________________________________________________________________________________________

class Main {
    companion object
}

fun Main.Companion.show() {  			//------------------> fun of companion obj
    println("Companion object show")
}

fun main() {
    Main.show()
}




