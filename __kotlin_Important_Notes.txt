- we can write main() fun without any param from kotlin version 1.3
- when you declare any variable that will be NotNull by default i.e you cannot store null init hence Kotlin Saves from NullPointerException mostly
- to making variable nullable '?' is imp Ex. var name : String? = null
- In Inheritance : if any class wants to extends then open it, and method wants override then open it. 
- In Kotlin any class and method inside class is final by default
- No need to define var keyword in sub class Constructor if you wants to send that param to super class
- Kotlin uses '==' for structural comparison and '===' for referential comparison.
- Only One companion object is allowed in single kotlin class
- In listOf() >
    val list = listOf(...)
      1. list.any { condition } => return true if any element in list which satisfies our conditions    //work like ||
      2. list.all { condition } => return true if all element in list which satisfies our conditions    //work like &&
      3. list.none{ condition } => return true if none of element in list which satisfies our condition //work like !
      4. list.find{ condition } => return first element in list which satisfies our conditions || if can't find return null
      5. list.findLast{ condition } => return last finded element from list which satisfies our conditions 
      6. list.first() => return first element in list
      7. list.last() => return last element in list
      8. list.first{ condition } => return first element from list which satisfies our condition
      9. list.last{ condition } => return last element from list which satisfies our condition
     10. list.firstOrNull() => return element if list array is not empty else return null
     11. list.lastOrNull() => return last element of array if list array is not empty else return null
     13. list.firstOrNull{ condition } => if(listIsNotEmpty) return first element which satisfies our condition else return null
     14. list.lastOrNull { condition } => if(listIsNotEmpty) return last founded last element from list which satisfies our condition else return null
     15. list.count() => return size of array
     16. list.count{ condition } => return size of array which satisfies our condition
      
