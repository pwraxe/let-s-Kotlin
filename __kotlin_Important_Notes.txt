- we can write main() fun without any param from kotlin version 1.3
- when you declare any variable that will be NotNull by default i.e you cannot store null init hence Kotlin Saves from NullPointerException mostly
- to making variable nullable '?' is imp Ex. var name : String? = null
- In Inheritance : if any class wants to extends then open it, and method wants override then open it. 
- In Kotlin any class and method inside class is final by default
- No need to define var keyword in sub class Constructor if you wants to send that param to super class
- Kotlin uses '==' for structural comparison and '===' for referential comparison.
- Only One companion object is allowed in single kotlin class
- boilerplate code mean repetation of code at multiple places
- we can write fun inside fun
- every our created class, method, variable is final by default, we need to 'open' it for override
- Every class has default constructor next to class name, write explicitly if want to give annotation to class else constructor keyword is optional to write next to class name
- Only one seal class can inherite to other seal class only 
- If interface contain only one abstract method then this can be written as lambda function 
- If any variable declare/initialized as not-null assertion (!!) then left side variable always treated as non-nullable
